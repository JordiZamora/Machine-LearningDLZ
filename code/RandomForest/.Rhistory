xlab("Session") +
ylab("Termination cond.") +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
text = element_text(size=20))+
scale_x_continuous(breaks=seq(1,11),labels=c("k-5", "k-4", "k-3", "k-2", "k-1", "k", "k+1", "k+2", "k+3", "k+4", "k+5"))
plot1
y <- p1*(wplus+1) + p2*w0 + p3*wminus
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
y <- p1*wplus + p2*(w0-1) + p3*wminus
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
y <- p1*wplus + p2*(w0-1) + p3*(wminus-1)
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
plot1 <-ggplot() +
geom_point(data=data, aes(x,y), col=col, size=5) +
geom_hline(data=data, aes(x,y=rep(0,N)), linetype="dashed") +
xlab("Session") +
ylab("Termination cond.") +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
text = element_text(size=20)) #+
#scale_x_continuous(breaks=seq(1,11),labels=c("k-5", "k-4", "k-3", "k-2", "k-1", "k", "k+1", "k+2", "k+3", "k+4", "k+5"))
plot1
plot1 <-ggplot() +
geom_point(data=data, aes(x,y), col=col, size=5) +
geom_hline(data=data, aes(x,y=rep(0,N)), linetype="dashed") +
xlab("Session") +
ylab("Termination cond.") +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
text = element_text(size=20)) +
scale_x_continuous(breaks=seq(1,11))
#scale_x_continuous(breaks=seq(1,11),labels=c("k-5", "k-4", "k-3", "k-2", "k-1", "k", "k+1", "k+2", "k+3", "k+4", "k+5"))
plot1
y <- p1*wplus + p2*(w0-1) + p3*(wminus-1)
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
y <- p1*wplus + p2*(w0-0) + p3*(wminus-1)
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
y <- p1*wplus + p2*(w0-1) + p3*(wminus-0)
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
y <- p1*wplus + p2*(w0-3) + p3*(wminus-0)
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
wplusAux <- 3
w0Aux <-  -1
wminusAux <- -2
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
wplusAux <- 3
w0Aux <-  0
wminusAux <- -1
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
wplusAux <- 2
w0Aux <-  0
wminusAux <- -1
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
wplusAux <- 1
w0Aux <-  0
wminusAux <- -1
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
wplusAux <- 2
w0Aux <-  0
wminusAux <- -1
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
wplusAux <- 0.5
w0Aux <-  0
wminusAux <- -1
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
wplusAux <- 1
w0Aux <-  2
wminusAux <- -1
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
wplusAux <- 1
w0Aux <-  0
wminusAux <- -2
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
wplusAux <- 1
w0Aux <-  -1
wminusAux <- -1
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
wplusAux <- 1
w0Aux <-  -2
wminusAux <- -1
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
wplusAux <- 1
w0Aux <-  0
wminusAux <- -2
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
wplusAux <- 1
w0Aux <-  0
wminusAux <- -0.5
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
wplusAux <- 2
w0Aux <-  0
wminusAux <- -1
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
## Increase wplus or w0 increase the slope
wplusAux <- 1
w0Aux <-  1
wminusAux <- -1
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
## Increase wplus or w0 increase the slope
wplusAux <- 2
w0Aux <-  0
wminusAux <- -1
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
## Increase wplus or w0 increase the slope
wplusAux <- 1
w0Aux <-  0
wminusAux <- 1
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
## Increase wplus or w0 increase the slope and move T to the right
## Increase wminus
wplusAux <- 1
w0Aux <-  0
wminusAux <- -0.5
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
## Increase wplus or w0 increase the slope and move T to the right
## Increase wminus
p3 <- seq(0,0.6,length.out=11) #Prob of lose
p1 <- seq(0.8,0.4,length.out=11) #Prob win on time
p2 <- 1-p1-p3 #Prob win below time
wplus <- 3
w0 <-  -1
wminus <- -2
N <-length(p1)
x <- seq(1:11)
y <- p1*wplus + p2*w0 + p3*wminus
col <- rep("chartreuse3",N)
col[y <0] <- "red"
data <- data.frame(x=x,y=y,col=col)
plot1 <-ggplot() +
geom_point(data=data, aes(x,y), col=col, size=5) +
geom_hline(data=data, aes(x,y=rep(0,N)), linetype="dashed") +
xlab("Session") +
ylab("Termination cond.") +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
text = element_text(size=20)) +
scale_x_continuous(breaks=seq(1,11))
#scale_x_continuous(breaks=seq(1,11),labels=c("k-5", "k-4", "k-3", "k-2", "k-1", "k", "k+1", "k+2", "k+3", "k+4", "k+5"))
plot1
p3 <- seq(0,0.4,length.out=11) #Prob of lose
p1 <- seq(0.8,0.6,length.out=11) #Prob win on time
p2 <- 1-p1-p3 #Prob win below time
p2
p1
p3
p3 <- seq(0,0.4,length.out=11) #Prob of lose
p1 <- seq(0.8,0.6,length.out=11) #Prob win on time
p2 <- 1-p1-p3 #Prob win below time
wplus <- 3
w0 <-  -1
wminus <- -2
N <-length(p1)
x <- seq(1:11)
y <- p1*wplus + p2*w0 + p3*wminus
col <- rep("chartreuse3",N)
col[y <0] <- "red"
data <- data.frame(x=x,y=y,col=col)
plot1 <-ggplot() +
geom_point(data=data, aes(x,y), col=col, size=5) +
geom_hline(data=data, aes(x,y=rep(0,N)), linetype="dashed") +
xlab("Session") +
ylab("Termination cond.") +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
text = element_text(size=20)) +
scale_x_continuous(breaks=seq(1,11))
#scale_x_continuous(breaks=seq(1,11),labels=c("k-5", "k-4", "k-3", "k-2", "k-1", "k", "k+1", "k+2", "k+3", "k+4", "k+5"))
plot1
p3 <- seq(0,0.6,length.out=11) #Prob of lose
p1 <- seq(0.8,0.4,length.out=11) #Prob win on time
p2 <- 1-p1-p3 #Prob win below time
wplus <- 1
w0 <-  0
wminus <- -1
N <-length(p1)
x <- seq(1:11)
y <- p1*wplus + p2*w0 + p3*wminus
col <- rep("chartreuse3",N)
col[y <0] <- "red"
data <- data.frame(x=x,y=y,col=col)
plot1 <-ggplot() +
geom_point(data=data, aes(x,y), col=col, size=5) +
geom_hline(data=data, aes(x,y=rep(0,N)), linetype="dashed") +
xlab("Session") +
ylab("Termination cond.") +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
text = element_text(size=20)) +
scale_x_continuous(breaks=seq(1,11))
#scale_x_continuous(breaks=seq(1,11),labels=c("k-5", "k-4", "k-3", "k-2", "k-1", "k", "k+1", "k+2", "k+3", "k+4", "k+5"))
plot1
p3 <- seq(0.2,0.8,length.out=11) #Prob of lose
p1 <- seq(0.6,0.2,length.out=11) #Prob win on time
p2 <- 1-p1-p3 #Prob win below time
p2
p3 <- seq(0.2,0.8,length.out=11) #Prob of lose
p1 <- seq(0.6,0.2,length.out=11) #Prob win on time
p2 <- 1-p1-p3 #Prob win below time
wplus <- 3
w0 <-  -1
wminus <- -2
N <-length(p1)
x <- seq(1:11)
y <- p1*wplus + p2*w0 + p3*wminus
col <- rep("chartreuse3",N)
col[y <0] <- "red"
data <- data.frame(x=x,y=y,col=col)
plot1 <-ggplot() +
geom_point(data=data, aes(x,y), col=col, size=5) +
geom_hline(data=data, aes(x,y=rep(0,N)), linetype="dashed") +
xlab("Session") +
ylab("Termination cond.") +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
text = element_text(size=20)) +
scale_x_continuous(breaks=seq(1,11))
#scale_x_continuous(breaks=seq(1,11),labels=c("k-5", "k-4", "k-3", "k-2", "k-1", "k", "k+1", "k+2", "k+3", "k+4", "k+5"))
plot1
wplusAux <- 4
w0Aux <-  -1
wminusAux <- -2
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
wplusAux <- 3
w0Aux <-  0
wminusAux <- -2
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
## Increase wplus or w0 increase the slope and move T to the right
## Increase wminus reduces the slope and move T to the right
## Increase the slope means go faster to the termiation
wplusAux <- 3
w0Aux <-  -1
wminusAux <- -1
y <- p1*wplusAux + p2*w0Aux + p3*wminusAux
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
## Increase wplus or w0 increase the slope and move T to the right
## Increase wminus reduces the slope and move T to the right
## Increase the slope means go faster to the termiation
p3Aux <- p3-0.2 #Prob of lose
p1Aux <- p1+0 #Prob win on time
p2Aux <- 1-p1Aux-p3Aux #Prob win below time
y <- p1Aux*wplus + p2Aux*w0 + p3Aux*wminus
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
p2Aux
p3Aux <- seq(0.2,0.6,length.out=11) #Prob of lose
p1Aux <- seq(0.6,0.2,length.out=11) #Prob win on time
p2Aux <- 1-p1Aux-p3Aux #Prob win below time
y <- p1Aux*wplus + p2Aux*w0 + p3Aux*wminus
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
#Reduce all p3 moves T to the right in parallel
#Reduce slope of p3 moves T to the right in parallel
p3 <- seq(0.2,0.8,length.out=11) #Prob of lose
p1 <- seq(0.6,0.1,length.out=11) #Prob win on time
p2 <- 1-p1-p3 #Prob win below time
wplus <- 3
w0 <-  -1
wminus <- -2
N <-length(p1)
x <- seq(1:11)
y <- p1*wplus + p2*w0 + p3*wminus
col <- rep("chartreuse3",N)
col[y <0] <- "red"
data <- data.frame(x=x,y=y,col=col)
plot1 <-ggplot() +
geom_point(data=data, aes(x,y), col=col, size=5) +
geom_hline(data=data, aes(x,y=rep(0,N)), linetype="dashed") +
xlab("Session") +
ylab("Termination cond.") +
theme_bw() +
theme(axis.line = element_line(colour = "black"),
text = element_text(size=20)) +
scale_x_continuous(breaks=seq(1,11))
#scale_x_continuous(breaks=seq(1,11),labels=c("k-5", "k-4", "k-3", "k-2", "k-1", "k", "k+1", "k+2", "k+3", "k+4", "k+5"))
plot1
p3Aux <- seq(0.2,0.8,length.out=11) #Prob of lose
p1Aux <- seq(0.7,0.2,length.out=11) #Prob win on time
p2Aux <- 1-p1Aux-p3Aux #Prob win below time
y <- p1Aux*wplus + p2Aux*w0 + p3Aux*wminus
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
#Reduce p3 moves T to the right. Reduce slope of p3 reduces the slope and moves T to the right.
#Reduce all p3 moves T to the right in parallel. Reduce slope of p3 reduces the slope and moves T to the right
p3Aux <- seq(0.3,0.9,length.out=11) #Prob of lose
p1Aux <- seq(0.6,0.1,length.out=11) #Prob win on time
p2Aux <- 1-p1Aux-p3Aux #Prob win below time
y <- p1Aux*wplus + p2Aux*w0 + p3Aux*wminus
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
#Increase p3 moves T to the left. Increase slope of p3 increases the slope and moves T to the left.
#Reduce all p3 moves T to the right in parallel. Reduce slope of p3 reduces the slope and moves T to the right
p3Aux <- seq(0.3,0.8,length.out=11) #Prob of lose
p1Aux <- seq(0.6,0.1,length.out=11) #Prob win on time
p2Aux <- 1-p1Aux-p3Aux #Prob win below time
y <- p1Aux*wplus + p2Aux*w0 + p3Aux*wminus
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
#Increase p3 moves T to the left. Increase slope of p3 increases the slope and moves T to the left.
#Reduce all p3 moves T to the right in parallel. Reduce slope of p3 reduces the slope and moves T to the right
p3Aux <- seq(0.2,0.9,length.out=11) #Prob of lose
p1Aux <- seq(0.6,0.1,length.out=11) #Prob win on time
p2Aux <- 1-p1Aux-p3Aux #Prob win below time
y <- p1Aux*wplus + p2Aux*w0 + p3Aux*wminus
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
#Increase p3 moves T to the left. Increase slope of p3 increases the slope and moves T to the left.
#Reduce all p3 moves T to the right in parallel. Reduce slope of p3 reduces the slope and moves T to the right
p3Aux <- seq(0.2,0.8,length.out=11) #Prob of lose
p1Aux <- seq(0.6,0.1,length.out=11) #Prob win on time
p2Aux <- 1-p1Aux-p3Aux #Prob win below time
y <- p1Aux*wplus + p2Aux*w0 + p3Aux*wminus
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
#Increase p3 moves T to the left. Increase slope of p3 increases the slope and moves T to the left.
#Reduce all p3 moves T to the right in parallel. Reduce slope of p3 reduces the slope and moves T to the right
p3Aux <- seq(0.2,0.8,length.out=11) #Prob of lose
p1Aux <- seq(0.7,0.2,length.out=11) #Prob win on time
p2Aux <- 1-p1Aux-p3Aux #Prob win below time
y <- p1Aux*wplus + p2Aux*w0 + p3Aux*wminus
col2 <- rep("gray",N)
data2 <- data.frame(x2=x,y2=y,col2=col2)
plot1 + geom_point(data=data2, aes(x,y2), col=col2, size=5)
#Increase p3 moves T to the left. Increase slope of p3 increases the slope and moves T to the left.
#Increase p1 moves T to the left. Increase slope of p3 increases the slope and moves T to the left.
a<-seq(1,100)
tail(a,10)
tail(a,1:10)
tail(a,10,15)
tail(a,15,10)
tail(a,15)[10]
tail(a,15)[1:10]
tail(a,15)[1:26]
tail(a,30)[1:26]
a <- data.frame(matrix(seq(1:10),2,5))
a
training_matrix <- data.frame(matrix(seq(1:10),2,5))
names(training_matrix) <- c(letters(1:5))
letters
names(training_matrix) <- c(letters[1:5])
training_matrix
test_matrix <- data.frame(matrix(seq(11:20),2,5))
names(training_matrix) <- c(letters[1:3],letters[6:7])
test_matrix <- data.frame(matrix(seq(11:22),2,6))
names(training_matrix) <- c(letters[1:3],letters[6:8])
test_matrix
names(test_matrix) <- c(letters[1:3],letters[6:8])
training_matrix
names(training_matrix) <- c(letters[1:3],letters[6:7])
names(training_matrix) <- c(letters[1:5])
training_matrix
test_matrix
names(training_matrix)%in%names(test_matrix)
names(test_matrix)%in%names(test_matrix)
names(test_matrix)%in%names(training_matrix)
test_matrix[,names(test_matrix)%in%names(training_matrix)]
test_matrixAux <- test_matrix[,names(test_matrix)%in%names(training_matrix)]
test_matrixFinal <- cbind(test_matrixAux, names(training_matrix)[!names(training_matrix)%in%names(test_matrix)])
test_matrixFinal
?data.frame
test_matrixFinal <- c()
names(test_matrixAux) <- c(names(test_matrixAux),"er")
data.frame(1,1:10)
names(training_matrix)[!names(training_matrix)%in%names(test_matrix)]
missedWords <- names(training_matrix)[!names(training_matrix)%in%names(test_matrix)]
matrix(0, nrow(training_matrix),length(missedWords))
data.frame(0, nrow(training_matrix),length(missedWords))
test_matrixFinal <- cbind(test_matrixAux, matrix(0, nrow(training_matrix),length(missedWords)))
test_matrixFinal
names(test_matrixFinal) <- c(names(test_matrixAux), missedWords)
test_matrixFinal
auxmatrix <- training_matrix
auxmatrix <- 0
auxmatrix
auxmatrix <- training_matrix
auxmatrix <- 0L
auxmatrix
auxmatrix <- training_matrix
auxmatrix
auxmatrix <- training_matrix
auxmatrix[,] <- 0L
auxmatrix
auxmatrix[,names(test_matrix)%in%names(training_matrix)] <- test_matrix[,names(test_matrix)%in%names(training_matrix)]
auxmatrix
training_matrix <- data.frame(matrix(seq(1,10),2,5))
names(training_matrix) <- c(letters[1:5])
test_matrix <- data.frame(matrix(seq(11,22),2,6))
names(test_matrix) <- c(letters[1:3],letters[6:8])
test_matrix_Final <- training_matrix
test_matrix_Final[,] <- 0L
#Populate it with the columns of the test that are also in the train. The rest are automatically 0
test_matrix_Final[,names(test_matrix)%in%names(training_matrix)] <- test_matrix[,names(test_matrix)%in%names(training_matrix)]
training_matrix
test_matrix
test_matrix_Final
test_matrix_Final==0
if (!require("foreach")) install.packages("foreach")
if (!require("doSNOW")) install.packages("doSNOW")
if (!require("randomForest")) install.packages("randomForest")
setwd("~/Documents/Cursos/DataScience/2ndTerm/HomeworkMachineLearning/Project/code/RandomForest")
#source("RF_XValidation.R")
source("RF_XValidationBuckets.R")
#Load data
rawdata <- read.csv("../../data/Kaggle_Covertype_training.csv")
numcol <- ncol(rawdata)
numrow <- nrow(rawdata)
#rawdata[,numcol] <- factor(rawdata[,numcol]) #Classes as factors
featuresRaw <- rawdata[,-c(1,numcol)]
featuresRaw <- featuresRaw[,-which(names(featuresRaw)=="soil_type_15")]
labels <- factor(rawdata[,numcol])
out<-princomp(featuresRaw)
features <- out$scores[,1:9]
t1 <- tuneRF(features,labels,mtryStart=3, ntreeTry=10, stepFactor=1.2, improve=0.01)
t1 <- tuneRF(features,labels,mtryStart=3, ntreeTry=50, stepFactor=1.2, improve=0.01)
t1 <- tuneRF(features,labels,mtryStart=6, ntreeTry=50, stepFactor=1.2, improve=0.01)
t1 <- tuneRF(features,labels,mtryStart=6, ntreeTry=100, stepFactor=1.2, improve=0.01)
dim(features)
t2 <- tuneRF(features,labels,mtryStart=6, ntreeTry=500, stepFactor=1.2, improve=0.01)
features <- out$scores[,1:15]
t1 <- tuneRF(features,labels,mtryStart=6, ntreeTry=10, stepFactor=1.2, improve=0.01)
t1 <- tuneRF(features,labels,mtryStart=10, ntreeTry=10, stepFactor=1.2, improve=0.01)
t2 <- tuneRF(features,labels,mtryStart=10, ntreeTry=50, stepFactor=1.2, improve=0.01)
t3 <- tuneRF(features,labels,mtryStart=9, ntreeTry=100, stepFactor=1.2, improve=0.01)
t4 <- tuneRF(features,labels,mtryStart=10, ntreeTry=1000, stepFactor=1.2, improve=0.01)
features <- out$scores
t1 <- tuneRF(features,labels,mtryStart=10, ntreeTry=50, stepFactor=1.2, improve=0.01)
features <- out$scores[,1:25]
t1 <- tuneRF(features,labels,mtryStart=10, ntreeTry=50, stepFactor=1.2, improve=0.01)
features <- featuresRaw
t1 <- tuneRF(features,labels,mtryStart=20, ntreeTry=50, stepFactor=1.2, improve=0.01)
dim(features)
t2 <- tuneRF(features,labels,mtryStart=39, ntreeTry=100, stepFactor=1.2, improve=0.01)
